


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       *************************************************
    2 00000000         ;                                               uC/OS-II
                       
    3 00000000         ;                                         The Real-Time 
                       Kernel
    4 00000000         ;
    5 00000000         ;                               (c) Copyright 1992-2006,
                        Micrium, Weston, FL
    6 00000000         ;                                          All Rights Re
                       served
    7 00000000         ;
    8 00000000         ;                                           Generic ARM 
                       Port
    9 00000000         ;
   10 00000000         ; File      : OS_CPU_A.ASM
   11 00000000         ; Version   : V2.86
   12 00000000         ; By        : Jean J. Labrosse
   13 00000000         ;
   14 00000000         ; For       : ARMv7M Cortex-M3
   15 00000000         ; Mode      : Thumb2
   16 00000000         ; Toolchain : RealView Development Suite
   17 00000000         ;             RealView Microcontroller Development Kit (
                       MDK)
   18 00000000         ;             ARM Developer Suite (ADS)
   19 00000000         ;             Keil uVision
   20 00000000         ;*******************************************************
                       *************************************************
   21 00000000         
   22 00000000         ;*******************************************************
                       *************************************************
   23 00000000         ;                                           PUBLIC FUNCT
                       IONS
   24 00000000         ;*******************************************************
                       *************************************************
   25 00000000         
   26 00000000                 EXTERN           OSRunning   ; External referenc
                                                            es
   27 00000000                 EXTERN           OSPrioCur
   28 00000000                 EXTERN           OSPrioHighRdy
   29 00000000                 EXTERN           OSTCBCur
   30 00000000                 EXTERN           OSTCBHighRdy
   31 00000000                 EXTERN           OSIntNesting
   32 00000000                 EXTERN           OSIntExit
   33 00000000                 EXTERN           OSTaskSwHook
   34 00000000         
   35 00000000         
   36 00000000                 EXPORT           OS_CPU_SR_Save ; Functions decl
                                                            ared in this file
   37 00000000                 EXPORT           OS_CPU_SR_Restore
   38 00000000                 EXPORT           OSStartHighRdy
   39 00000000                 EXPORT           OSCtxSw
   40 00000000                 EXPORT           OSIntCtxSw
   41 00000000                 EXPORT           OSPendSV
   42 00000000         
   43 00000000         ;*******************************************************
                       *************************************************
   44 00000000         ;                                                EQUATES
                       



ARM Macro Assembler    Page 2 


   45 00000000         ;*******************************************************
                       *************************************************
   46 00000000         
   47 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register
   48 00000000 E000ED20 
                       NVIC_SYSPRI2
                               EQU              0xE000ED20  ; System priority r
                                                            egister (2)
   49 00000000 00000000 
                       NVIC_PENDSV_PRI
                               EQU              0x00        ; PendSV priority v
                                                            alue (highest)
   50 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception
   51 00000000         
   52 00000000         ;*******************************************************
                       *************************************************
   53 00000000         ;                                      CODE GENERATION D
                       IRECTIVES
   54 00000000         ;*******************************************************
                       *************************************************
   55 00000000         
   56 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   57 00000000                 THUMB
   58 00000000                 REQUIRE8
   59 00000000                 PRESERVE8
   60 00000000         
   61 00000000         ;*******************************************************
                       **************************************************
   62 00000000         ;                                   CRITICAL SECTION MET
                       HOD 3 FUNCTIONS
   63 00000000         ;
   64 00000000         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you
   65 00000000         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
   66 00000000         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II's functions that need to
   67 00000000         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
   68 00000000         ;              into the CPU's status register.
   69 00000000         ;
   70 00000000         ; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(void);
   71 00000000         ;                  void       OS_CPU_SR_Restore(OS_CPU_S
                       R cpu_sr);
   72 00000000         ;
   73 00000000         ;
   74 00000000         ; Note(s)    : 1) These functions are used in general li
                       ke this:
   75 00000000         ;
   76 00000000         ;                 void Task (void *p_arg)
   77 00000000         ;                 {
   78 00000000         ;                 #if OS_CRITICAL_METHOD == 3          /



ARM Macro Assembler    Page 3 


                       * Allocate storage for CPU status register */
   79 00000000         ;                     OS_CPU_SR  cpu_sr;
   80 00000000         ;                 #endif
   81 00000000         ;
   82 00000000         ;                          :
   83 00000000         ;                          :
   84 00000000         ;                     OS_ENTER_CRITICAL();             /
                       * cpu_sr = OS_CPU_SaveSR();                */
   85 00000000         ;                          :
   86 00000000         ;                          :
   87 00000000         ;                     OS_EXIT_CRITICAL();              /
                       * OS_CPU_RestoreSR(cpu_sr);                */
   88 00000000         ;                          :
   89 00000000         ;                          :
   90 00000000         ;                 }
   91 00000000         ;
   92 00000000         ;              2) OS_CPU_SaveSR() is implemented as reco
                       mmended by Atmel's application note:
   93 00000000         ;
   94 00000000         ;            (N/A for Cortex-M3)    "Disabling Interrupt
                       s at Processor Level"
   95 00000000         ;*******************************************************
                       **************************************************
   96 00000000         
   97 00000000         OS_CPU_SR_Save
   98 00000000 F3EF 8010       MRS              R0, PRIMASK ; Set prio int mask
                                                             to mask all (excep
                                                            t faults)
   99 00000004 B672            CPSID            I
  100 00000006 4770            BX               LR
  101 00000008         
  102 00000008         OS_CPU_SR_Restore
  103 00000008 F380 8810       MSR              PRIMASK, R0
  104 0000000C 4770            BX               LR
  105 0000000E         
  106 0000000E         
  107 0000000E         ;*******************************************************
                       **************************************************
  108 0000000E         ;                                          START MULTITA
                       SKING
  109 0000000E         ;                                       void OSStartHigh
                       Rdy(void)
  110 0000000E         ;
  111 0000000E         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
  112 0000000E         ;              the first task to start.
  113 0000000E         ;
  114 0000000E         ;           2) OSStartHighRdy() MUST:
  115 0000000E         ;              a) Setup PendSV exception priority to low
                       est;
  116 0000000E         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
  117 0000000E         ;              c) Set OSRunning to TRUE;
  118 0000000E         ;              d) Trigger PendSV exception;
  119 0000000E         ;              e) Enable interrupts (tasks will run with
                        interrupts enabled).
  120 0000000E         ;*******************************************************
                       **************************************************
  121 0000000E         



ARM Macro Assembler    Page 4 


  122 0000000E         OSStartHighRdy
  123 0000000E 4824            LDR              R0, =NVIC_SYSPRI2 ; Set the Pen
                                                            dSV exception prior
                                                            ity
  124 00000010 F04F 0100       LDR              R1, =NVIC_PENDSV_PRI
  125 00000014 7001            STRB             R1, [R0]
  126 00000016         
  127 00000016 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
  128 00000018 F380 8809       MSR              PSP, R0
  129 0000001C         
  130 0000001C 481D            LDR              R0, __OS_Running 
                                                            ; OSRunning = TRUE
  131 0000001E 2101            MOVS             R1, #1
  132 00000020 7001            STRB             R1, [R0]
  133 00000022         
  134 00000022 4820            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  135 00000024 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  136 00000028 6001            STR              R1, [R0]
  137 0000002A         
  138 0000002A B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
  139 0000002C         
  140 0000002C         OSStartHang
  141 0000002C E7FE            B                OSStartHang ; Should never get 
                                                            here
  142 0000002E         
  143 0000002E         
  144 0000002E         ;*******************************************************
                       **************************************************
  145 0000002E         ;                               PERFORM A CONTEXT SWITCH
                        (From task level)
  146 0000002E         ;                                           void OSCtxSw
                       (void)
  147 0000002E         ;
  148 0000002E         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  149 0000002E         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  150 0000002E         ;*******************************************************
                       **************************************************
  151 0000002E         
  152 0000002E         OSCtxSw
  153 0000002E 481D            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  154 00000030 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  155 00000034 6001            STR              R1, [R0]
  156 00000036 4770            BX               LR
  157 00000038         
  158 00000038         ;*******************************************************
                       **************************************************
  159 00000038         ;                             PERFORM A CONTEXT SWITCH (



ARM Macro Assembler    Page 5 


                       From interrupt level)
  160 00000038         ;                                         void OSIntCtxS
                       w(void)
  161 00000038         ;
  162 00000038         ; Notes:    1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  163 00000038         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  164 00000038         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  165 00000038         ;*******************************************************
                       **************************************************
  166 00000038         
  167 00000038         OSIntCtxSw
  168 00000038 481A            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  169 0000003A F04F 5180       LDR              R1, =NVIC_PENDSVSET
  170 0000003E 6001            STR              R1, [R0]
  171 00000040 4770            BX               LR
  172 00000042         
  173 00000042         ;*******************************************************
                       **************************************************
  174 00000042         ;                                         HANDLE PendSV 
                       EXCEPTION
  175 00000042         ;                                            void OSPend
                       SV(void)
  176 00000042         ;
  177 00000042         ; Note(s) : 1) OSPendSV is used to cause a context switc
                       h.  This is a recommended method for performing
  178 00000042         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  179 00000042         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  180 00000042         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  181 00000042         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  182 00000042         ;              a thread or occurs due to an interrupt or
                        exception.
  183 00000042         ;
  184 00000042         ;           2) Pseudo-code is:
  185 00000042         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  186 00000042         ;              b) Save remaining regs r4-r11 on process 
                       stack;
  187 00000042         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
  188 00000042         ;              d) Call OSTaskSwHook();
  189 00000042         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  190 00000042         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
  191 00000042         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
  192 00000042         ;              h) Restore R4-R11 from new process stack;
                       
  193 00000042         ;              i) Perform exception return which will re



ARM Macro Assembler    Page 6 


                       store remaining context.
  194 00000042         ;
  195 00000042         ;           3) On entry into OSPendSV handler:
  196 00000042         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  197 00000042         ;                 xPSR, PC, LR, R12, R0-R3
  198 00000042         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  199 00000042         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  200 00000042         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  201 00000042         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  202 00000042         ;
  203 00000042         ;           4) Since OSPendSV is set to lowest priority 
                       in the system (by OSStartHighRdy() above), we
  204 00000042         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  205 00000042         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  206 00000042         ;*******************************************************
                       **************************************************
  207 00000042         
  208 00000042         OSPendSV
  209 00000042 F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  210 00000046 B128            CBZ              R0, OSPendSV_nosave ; skip regi
                                                            ster save the first
                                                             time
  211 00000048         
  212 00000048 3820            SUBS             R0, R0, #0x20 ; save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  213 0000004A E880 0FF0       STM              R0, {R4-R11}
  214 0000004E         
  215 0000004E 4912            LDR              R1, __OS_TCBCur ; OSTCBCur->OST
                                                            CBStkPtr = SP;
  216 00000050 6809            LDR              R1, [R1]
  217 00000052 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  218 00000054         
  219 00000054         ; at this point, entire context of process has been save
                       d
  220 00000054         OSPendSV_nosave
  221 00000054 B500            PUSH             {R14}       ; need to save LR e
                                                            xc_return value
  222 00000056 480A            LDR              R0, __OS_TaskSwHook 
                                                            ; OSTaskSwHook();
  223 00000058 4780            BLX              R0
  224 0000005A F85D EB04       POP              {R14}
  225 0000005E         
  226 0000005E 480B            LDR              R0, __OS_PrioCur ; OSPrioCur = 
                                                            OSPrioHighRdy;
  227 00000060 490B            LDR              R1, __OS_PrioHighRdy
  228 00000062 780A            LDRB             R2, [R1]
  229 00000064 7002            STRB             R2, [R0]
  230 00000066         



ARM Macro Assembler    Page 7 


  231 00000066 480C            LDR              R0, __OS_TCBCur ; OSTCBCur  = O
                                                            STCBHighRdy;
  232 00000068 490C            LDR              R1, __OS_TCBHighRdy
  233 0000006A 680A            LDR              R2, [R1]
  234 0000006C 6002            STR              R2, [R0]
  235 0000006E         
  236 0000006E 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  237 00000070 E890 0FF0       LDM              R0, {R4-R11} ; restore r4-11 fr
                                                            om new process stac
                                                            k
  238 00000074 3020            ADDS             R0, R0, #0x20
  239 00000076 F380 8809       MSR              PSP, R0     ; load PSP with new
                                                             process SP
  240 0000007A F04E 0E04       ORR              LR, LR, #0x04 ; ensure exceptio
                                                            n return uses proce
                                                            ss stack
  241 0000007E 4770            BX               LR          ; exception return 
                                                            will restore remain
                                                            ing context
  242 00000080         
  243 00000080         
  244 00000080         ;*******************************************************
                       **************************************************
  245 00000080         ;                                     POINTERS TO VARIAB
                       LES
  246 00000080         ;*******************************************************
                       **************************************************
  247 00000080         
  248 00000080         __OS_TaskSwHook
  249 00000080 00000000        DCD              OSTaskSwHook
  250 00000084         
  251 00000084         __OS_IntExit
  252 00000084 00000000        DCD              OSIntExit
  253 00000088         
  254 00000088         __OS_IntNesting
  255 00000088 00000000        DCD              OSIntNesting
  256 0000008C         
  257 0000008C         __OS_PrioCur
  258 0000008C 00000000        DCD              OSPrioCur
  259 00000090         
  260 00000090         __OS_PrioHighRdy
  261 00000090 00000000        DCD              OSPrioHighRdy
  262 00000094         
  263 00000094         __OS_Running
  264 00000094 00000000        DCD              OSRunning
  265 00000098         
  266 00000098         __OS_TCBCur
  267 00000098 00000000        DCD              OSTCBCur
  268 0000009C         
  269 0000009C         __OS_TCBHighRdy
  270 0000009C 00000000        DCD              OSTCBHighRdy
  271 000000A0         
  272 000000A0                 END
              E000ED20 
              E000ED04 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\obj\os_cpu_a.d -o.\obj\os_cpu_a.o -I.\RTE\_Card -IC:\Keil_v5\ARM



ARM Macro Assembler    Page 8 


\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_D
FP\2.3.0\Device\Include --predefine="__UVISION_VERSION SETA 526" --predefine="_
RTE_ SETA 1" --predefine="STM32F10X_HD SETA 1" --list=.\lst\os_cpu_a.lst ..\..\
uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 56 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.as
m
   Uses
      None
Comment: .text unused
OSCtxSw 0000002E

Symbol: OSCtxSw
   Definitions
      At line 152 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
   Uses
      At line 39 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.as
m
Comment: OSCtxSw used once
OSIntCtxSw 00000038

Symbol: OSIntCtxSw
   Definitions
      At line 167 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
   Uses
      At line 40 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.as
m
Comment: OSIntCtxSw used once
OSPendSV 00000042

Symbol: OSPendSV
   Definitions
      At line 208 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
   Uses
      At line 41 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.as
m
Comment: OSPendSV used once
OSPendSV_nosave 00000054

Symbol: OSPendSV_nosave
   Definitions
      At line 220 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
   Uses
      At line 210 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
Comment: OSPendSV_nosave used once
OSStartHang 0000002C

Symbol: OSStartHang
   Definitions
      At line 140 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
   Uses
      At line 141 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
Comment: OSStartHang used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

OSStartHighRdy 0000000E

Symbol: OSStartHighRdy
   Definitions
      At line 122 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
   Uses
      At line 38 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.as
m
Comment: OSStartHighRdy used once
OS_CPU_SR_Restore 00000008

Symbol: OS_CPU_SR_Restore
   Definitions
      At line 102 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
   Uses
      At line 37 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.as
m
Comment: OS_CPU_SR_Restore used once
OS_CPU_SR_Save 00000000

Symbol: OS_CPU_SR_Save
   Definitions
      At line 97 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.as
m
   Uses
      At line 36 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.as
m
Comment: OS_CPU_SR_Save used once
__OS_IntExit 00000084

Symbol: __OS_IntExit
   Definitions
      At line 251 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
   Uses
      None
Comment: __OS_IntExit unused
__OS_IntNesting 00000088

Symbol: __OS_IntNesting
   Definitions
      At line 254 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
   Uses
      None
Comment: __OS_IntNesting unused
__OS_PrioCur 0000008C

Symbol: __OS_PrioCur
   Definitions
      At line 257 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
   Uses
      At line 226 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
Comment: __OS_PrioCur used once
__OS_PrioHighRdy 00000090



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


Symbol: __OS_PrioHighRdy
   Definitions
      At line 260 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
   Uses
      At line 227 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
Comment: __OS_PrioHighRdy used once
__OS_Running 00000094

Symbol: __OS_Running
   Definitions
      At line 263 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
   Uses
      At line 130 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
Comment: __OS_Running used once
__OS_TCBCur 00000098

Symbol: __OS_TCBCur
   Definitions
      At line 266 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
   Uses
      At line 215 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
      At line 231 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm

__OS_TCBHighRdy 0000009C

Symbol: __OS_TCBHighRdy
   Definitions
      At line 269 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
   Uses
      At line 232 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
Comment: __OS_TCBHighRdy used once
__OS_TaskSwHook 00000080

Symbol: __OS_TaskSwHook
   Definitions
      At line 248 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
   Uses
      At line 222 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
Comment: __OS_TaskSwHook used once
17 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 47 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.as
m
   Uses
      At line 134 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
      At line 153 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
      At line 168 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 50 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.as
m
   Uses
      At line 135 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
      At line 154 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
      At line 169 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm

NVIC_PENDSV_PRI 00000000

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 49 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.as
m
   Uses
      At line 124 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI2 E000ED20

Symbol: NVIC_SYSPRI2
   Definitions
      At line 48 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.as
m
   Uses
      At line 123 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
Comment: NVIC_SYSPRI2 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 32 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.as
m
   Uses
      At line 252 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
Comment: OSIntExit used once
OSIntNesting 00000000

Symbol: OSIntNesting
   Definitions
      At line 31 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.as
m
   Uses
      At line 255 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
Comment: OSIntNesting used once
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 27 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.as
m
   Uses
      At line 258 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 28 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.as
m
   Uses
      At line 261 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 26 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.as
m
   Uses
      At line 264 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 29 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.as
m
   Uses
      At line 267 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Comment: OSTCBCur used once
OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 30 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.as
m
   Uses
      At line 270 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
Comment: OSTCBHighRdy used once
OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 33 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.as
m
   Uses
      At line 249 in file ..\..\uCOS-II\Ports\ARM-Cortex-M3\RealView\os_cpu_a.a
sm
Comment: OSTaskSwHook used once
8 symbols
364 symbols in table
